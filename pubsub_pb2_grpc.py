# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pubsub_pb2 as pubsub__pb2


class RegisteryServerAndServerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterServer = channel.unary_unary(
                '/pubsub.RegisteryServerAndServerService/RegisterServer',
                request_serializer=pubsub__pb2.Server.SerializeToString,
                response_deserializer=pubsub__pb2.Status.FromString,
                )


class RegisteryServerAndServerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisteryServerAndServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterServer,
                    request_deserializer=pubsub__pb2.Server.FromString,
                    response_serializer=pubsub__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.RegisteryServerAndServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisteryServerAndServerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.RegisteryServerAndServerService/RegisterServer',
            pubsub__pb2.Server.SerializeToString,
            pubsub__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegisteryServerAndClientServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetListOfServers = channel.unary_stream(
                '/pubsub.RegisteryServerAndClientService/GetListOfServers',
                request_serializer=pubsub__pb2.Client.SerializeToString,
                response_deserializer=pubsub__pb2.Server.FromString,
                )


class RegisteryServerAndClientServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetListOfServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisteryServerAndClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetListOfServers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetListOfServers,
                    request_deserializer=pubsub__pb2.Client.FromString,
                    response_serializer=pubsub__pb2.Server.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.RegisteryServerAndClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisteryServerAndClientService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetListOfServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pubsub.RegisteryServerAndClientService/GetListOfServers',
            pubsub__pb2.Client.SerializeToString,
            pubsub__pb2.Server.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerConnectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectServer = channel.unary_unary(
                '/pubsub.ServerConnectorService/ConnectServer',
                request_serializer=pubsub__pb2.Server.SerializeToString,
                response_deserializer=pubsub__pb2.Status.FromString,
                )


class ServerConnectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConnectServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectServer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectServer,
                    request_deserializer=pubsub__pb2.Server.FromString,
                    response_serializer=pubsub__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.ServerConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerConnectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConnectServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerConnectorService/ConnectServer',
            pubsub__pb2.Server.SerializeToString,
            pubsub__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerAndClientServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/pubsub.ServerAndClientService/JoinServer',
                request_serializer=pubsub__pb2.Client.SerializeToString,
                response_deserializer=pubsub__pb2.Status.FromString,
                )
        self.LeaveServer = channel.unary_unary(
                '/pubsub.ServerAndClientService/LeaveServer',
                request_serializer=pubsub__pb2.Client.SerializeToString,
                response_deserializer=pubsub__pb2.Status.FromString,
                )
        self.getArticles = channel.unary_unary(
                '/pubsub.ServerAndClientService/getArticles',
                request_serializer=pubsub__pb2.ArticleRequest.SerializeToString,
                response_deserializer=pubsub__pb2.ArticlesResponse.FromString,
                )
        self.getConnectedArticles = channel.unary_unary(
                '/pubsub.ServerAndClientService/getConnectedArticles',
                request_serializer=pubsub__pb2.ConnectedGetArticleRequest.SerializeToString,
                response_deserializer=pubsub__pb2.ArticlesResponse.FromString,
                )
        self.publishArticle = channel.unary_unary(
                '/pubsub.ServerAndClientService/publishArticle',
                request_serializer=pubsub__pb2.PublishArticleRequest.SerializeToString,
                response_deserializer=pubsub__pb2.Status.FromString,
                )


class ServerAndClientServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConnectedArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerAndClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=pubsub__pb2.Client.FromString,
                    response_serializer=pubsub__pb2.Status.SerializeToString,
            ),
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=pubsub__pb2.Client.FromString,
                    response_serializer=pubsub__pb2.Status.SerializeToString,
            ),
            'getArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.getArticles,
                    request_deserializer=pubsub__pb2.ArticleRequest.FromString,
                    response_serializer=pubsub__pb2.ArticlesResponse.SerializeToString,
            ),
            'getConnectedArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.getConnectedArticles,
                    request_deserializer=pubsub__pb2.ConnectedGetArticleRequest.FromString,
                    response_serializer=pubsub__pb2.ArticlesResponse.SerializeToString,
            ),
            'publishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.publishArticle,
                    request_deserializer=pubsub__pb2.PublishArticleRequest.FromString,
                    response_serializer=pubsub__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.ServerAndClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerAndClientService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerAndClientService/JoinServer',
            pubsub__pb2.Client.SerializeToString,
            pubsub__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerAndClientService/LeaveServer',
            pubsub__pb2.Client.SerializeToString,
            pubsub__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerAndClientService/getArticles',
            pubsub__pb2.ArticleRequest.SerializeToString,
            pubsub__pb2.ArticlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getConnectedArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerAndClientService/getConnectedArticles',
            pubsub__pb2.ConnectedGetArticleRequest.SerializeToString,
            pubsub__pb2.ArticlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.ServerAndClientService/publishArticle',
            pubsub__pb2.PublishArticleRequest.SerializeToString,
            pubsub__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
